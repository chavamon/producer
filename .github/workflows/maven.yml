# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload to EC2
        uses: burnett01/rsync-deployments@5.1
        with:
          switches: -avzr --delete
          path: target/producer-0.0.1-SNAPSHOT.jar
          remote_path: /home/ec2-user/
          remote_host: ${{ secrets.EC2_PUBLIC_IP }}
          remote_user: ec2-user
          remote_key: ${{ secrets.EC2_KEY }}

      - name: Restart Spring Boot application
        run: |
            ssh -i ${{ secrets.EC2_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << EOF
            pkill -f 'java -jar' || true
            nohup java -jar /home/ec2-user/producer-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &
            EOF

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
